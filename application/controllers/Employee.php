<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Employee extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Employee_model');
    } 

    /*
     * Listing of employees
     */
    function index()
    {
        $data['employees'] = $this->Employee_model->get_all_employees();
        
        $data['_view'] = 'employee/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new employee
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'board_in_location_id' => $this->input->post('board_in_location_id'),
				'board_off_location_id' => $this->input->post('board_off_location_id'),
				'route_id' => $this->input->post('route_id'),
				'employee_type_id' => $this->input->post('employee_type_id'),
				'company_shift_id' => $this->input->post('company_shift_id'),
				'account_status' => $this->input->post('account_status'),
				'password' => $this->input->post('password'),
				'name' => $this->input->post('name'),
				'mobile' => $this->input->post('mobile'),
				'email' => $this->input->post('email'),
				'company' => $this->input->post('company'),
				'address' => $this->input->post('address'),
            );
            
            $employee_id = $this->Employee_model->add_employee($params);
            redirect('employee/index');
        }
        else
        {
			$this->load->model('Location_model');
			$data['all_locations'] = $this->Location_model->get_all_locations();
			$data['all_locations'] = $this->Location_model->get_all_locations();

			$this->load->model('Route_model');
			$data['all_routes'] = $this->Route_model->get_all_routes();

			$this->load->model('Employee_type_model');
			$data['all_employee_type'] = $this->Employee_type_model->get_all_employee_type();

			$this->load->model('Shift_model');
			$data['all_shifts'] = $this->Shift_model->get_all_shifts();

			$this->load->model('Account_statu_model');
			$data['all_account_status'] = $this->Account_statu_model->get_all_account_status();
            
            $data['_view'] = 'employee/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a employee
     */
    function edit($id)
    {   
        // check if the employee exists before trying to edit it
        $data['employee'] = $this->Employee_model->get_employee($id);
        
        if(isset($data['employee']['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'board_in_location_id' => $this->input->post('board_in_location_id'),
					'board_off_location_id' => $this->input->post('board_off_location_id'),
					'route_id' => $this->input->post('route_id'),
					'employee_type_id' => $this->input->post('employee_type_id'),
					'company_shift_id' => $this->input->post('company_shift_id'),
					'account_status' => $this->input->post('account_status'),
					'password' => $this->input->post('password'),
					'name' => $this->input->post('name'),
					'mobile' => $this->input->post('mobile'),
					'email' => $this->input->post('email'),
					'company' => $this->input->post('company'),
					'address' => $this->input->post('address'),
                );

                $this->Employee_model->update_employee($id,$params);            
                redirect('employee/index');
            }
            else
            {
				$this->load->model('Location_model');
				$data['all_locations'] = $this->Location_model->get_all_locations();
				$data['all_locations'] = $this->Location_model->get_all_locations();

				$this->load->model('Route_model');
				$data['all_routes'] = $this->Route_model->get_all_routes();

				$this->load->model('Employee_type_model');
				$data['all_employee_type'] = $this->Employee_type_model->get_all_employee_type();

				$this->load->model('Shift_model');
				$data['all_shifts'] = $this->Shift_model->get_all_shifts();

				$this->load->model('Account_statu_model');
				$data['all_account_status'] = $this->Account_statu_model->get_all_account_status();

                $data['_view'] = 'employee/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The employee you are trying to edit does not exist.');
    } 

    /*
     * Deleting employee
     */
    function remove($id)
    {
        $employee = $this->Employee_model->get_employee($id);

        // check if the employee exists before trying to delete it
        if(isset($employee['id']))
        {
            $this->Employee_model->delete_employee($id);
            redirect('employee/index');
        }
        else
            show_error('The employee you are trying to delete does not exist.');
    }

    /*
    *   Login by email and password function
    */
    function login(){
        //var_dump($_POST);
        //$this->load->library('session');

        //**************FETCH DATA*****************
        $email = $this->input->post("email");
        $password = md5($this->input->post("password"));
        $api = $this->input->post("api");

        //***************CHECK IF ANY DATA IS SEND OR NOT
        if(isset($_POST) && count($_POST) > 0)     
        {
            $employee = $this->Employee_model->get_employee_by_email_and_password($email,$password);
            if(isset($employee['email']))
            {
                $data['result']="Success";
                $data['message']="Logged in Successfully";
 
                $this->session->set_userdata('email',$email);

                if($api == "1") { echo json_encode($data); }else{ redirect("dashboard/index"); }
            }
            else
            {
                $data['result']="Failed";
                $data['message']="Failed to login! Check your credentials";
            }
        }
        $data['_view'] = 'employee/login';
        $data['session'] = $this->session->userdata('email');

        if($api == "1") { echo json_encode($data); }else{ $this->load->view('layouts/plain',$data); }
        
    }

    /*
    *   Logout function
    */
    function logout(){
        $api = $this->input->post("api");

        $user_data = $this->session->all_userdata();
        foreach ($user_data as $key => $value) {
            if ($key != 'session_id' && $key != 'ip_address' && $key != 'user_agent' && $key != 'last_activity') {
                $this->session->unset_userdata($key);
            }
        }

        if(isset($user_data['email'])){
            $data['result']="Failed";
            $data['message']="Failed to logout! Try Again";
        }else{
            $data['result']="Success";
            $data['message']="Logged out successfully!";
        }

        $this->session->sess_destroy();
        
        if($api == "1") { echo json_encode($data); }else{ redirect('employee/login'); }
        
    }
    
}
