<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Contractor extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Contractor_model');
    } 

    /*
     * Listing of contractors
     */
    function index()
    {
        $data['contractors'] = $this->Contractor_model->get_all_contractors();
        
        $data['_view'] = 'contractor/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new contractor
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('password','Password','required|max_length[100]');
		$this->form_validation->set_rules('name','Name','required|max_length[50]');
		$this->form_validation->set_rules('mobile','Mobile','required|integer');
		$this->form_validation->set_rules('email','Email','max_length[50]|valid_email');
		$this->form_validation->set_rules('address','Address','required|max_length[150]');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'password' => $this->input->post('password'),
				'name' => $this->input->post('name'),
				'mobile' => $this->input->post('mobile'),
				'email' => $this->input->post('email'),
				'address' => $this->input->post('address'),
            );
            
            $contractor_id = $this->Contractor_model->add_contractor($params);
            redirect('contractor/index');
        }
        else
        {            
            $data['_view'] = 'contractor/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a contractor
     */
    function edit($id)
    {   
        // check if the contractor exists before trying to edit it
        $data['contractor'] = $this->Contractor_model->get_contractor($id);
        
        if(isset($data['contractor']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('password','Password','required|max_length[100]');
			$this->form_validation->set_rules('name','Name','required|max_length[50]');
			$this->form_validation->set_rules('mobile','Mobile','required|integer');
			$this->form_validation->set_rules('email','Email','max_length[50]|valid_email');
			$this->form_validation->set_rules('address','Address','required|max_length[150]');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'password' => $this->input->post('password'),
					'name' => $this->input->post('name'),
					'mobile' => $this->input->post('mobile'),
					'email' => $this->input->post('email'),
					'address' => $this->input->post('address'),
                );

                $this->Contractor_model->update_contractor($id,$params);            
                redirect('contractor/index');
            }
            else
            {
                $data['_view'] = 'contractor/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The contractor you are trying to edit does not exist.');
    } 

    /*
     * Deleting contractor
     */
    function remove($id)
    {
        $contractor = $this->Contractor_model->get_contractor($id);

        // check if the contractor exists before trying to delete it
        if(isset($contractor['id']))
        {
            $this->Contractor_model->delete_contractor($id);
            redirect('contractor/index');
        }
        else
            show_error('The contractor you are trying to delete does not exist.');
    }
    
}
